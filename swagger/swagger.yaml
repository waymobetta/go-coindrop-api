consumes:
- application/json
- application/xml
- application/gob
- application/x-gob
definitions:
  Badge:
    description: Badge (default view)
    example:
      description: Eaque facere voluptates consequatur nihil odit.
      id: Quam quae aut cumque consequatur asperiores.
      name: Hic illum veniam magni nam perferendis.
      recipients: 7796898160710639916
    properties:
      description:
        description: badge description
        example: Eaque facere voluptates consequatur nihil odit.
        type: string
      id:
        description: badge ID
        example: Quam quae aut cumque consequatur asperiores.
        type: string
      name:
        description: badge name
        example: Hic illum veniam magni nam perferendis.
        type: string
      recipients:
        description: badge recipients
        example: 7796898160710639916
        format: int64
        type: integer
    required:
    - id
    - name
    - description
    - recipients
    title: 'Mediatype identifier: application/vnd.badge+json; view=default'
    type: object
  Healthcheck:
    description: Health check (default view)
    example:
      status: Ut unde aliquam voluptatibus.
    properties:
      status:
        description: Status
        example: Ut unde aliquam voluptatibus.
        type: string
    required:
    - status
    title: 'Mediatype identifier: application/vnd.healthcheck+json; view=default'
    type: object
  Quiz:
    description: Quiz (default view)
    example:
      quizObject: false
    properties:
      quizObject:
        description: Quiz object
        example: false
    required:
    - quizObject
    title: 'Mediatype identifier: application/vnd.quiz+json; view=default'
    type: object
  Results:
    description: Quiz results (default view)
    example:
      quizResultsList: true
    properties:
      quizResultsList:
        description: quiz results list
        example: true
    required:
    - quizResultsList
    title: 'Mediatype identifier: application/vnd.results+json; view=default'
    type: object
  Standard_error:
    description: A standard error response (default view)
    example:
      code: 400
      message: Bad Request
    properties:
      code:
        description: A code that describes the error
        example: 400
        format: int64
        type: integer
      message:
        description: A message that describes the error
        example: Bad Request
        type: string
    required:
    - code
    - message
    title: 'Mediatype identifier: application/standard_error+json; view=default'
    type: object
  Task:
    description: Task (default view)
    example:
      author: Corrupti eum fugit eaque.
      badge:
        description: Eaque facere voluptates consequatur nihil odit.
        id: Quam quae aut cumque consequatur asperiores.
        name: Hic illum veniam magni nam perferendis.
        recipients: 7796898160710639916
      description: Autem est.
      id: 1158327838646931452
      isAssigned: false
      isCompleted: true
      title: Et non.
      token: Corporis aut ullam.
      tokenAllocation: 4218755209323260807
      type: Odit vero eum fuga quo rerum.
    properties:
      author:
        description: task author
        example: Corrupti eum fugit eaque.
        type: string
      badge:
        $ref: '#/definitions/Badge'
      description:
        description: task description
        example: Autem est.
        type: string
      id:
        description: task ID
        example: 1158327838646931452
        format: int64
        type: integer
      isAssigned:
        description: task assigned flag
        example: false
        type: boolean
      isCompleted:
        description: task completed flag
        example: true
        type: boolean
      title:
        description: task title
        example: Et non.
        type: string
      token:
        description: task token
        example: Corporis aut ullam.
        type: string
      tokenAllocation:
        description: token allocation
        example: 4218755209323260807
        format: int64
        type: integer
      type:
        description: task type
        example: Odit vero eum fuga quo rerum.
        type: string
    required:
    - id
    - title
    - type
    - author
    - description
    - token
    - tokenAllocation
    - badge
    - isAssigned
    - isCompleted
    title: 'Mediatype identifier: application/vnd.task+json; view=default'
    type: object
  TaskCollection:
    description: TaskCollection is the media type for an array of Task (default view)
    example:
    - author: Corrupti eum fugit eaque.
      badge:
        description: Eaque facere voluptates consequatur nihil odit.
        id: Quam quae aut cumque consequatur asperiores.
        name: Hic illum veniam magni nam perferendis.
        recipients: 7796898160710639916
      description: Autem est.
      id: 1158327838646931452
      isAssigned: false
      isCompleted: true
      title: Et non.
      token: Corporis aut ullam.
      tokenAllocation: 4218755209323260807
      type: Odit vero eum fuga quo rerum.
    items:
      $ref: '#/definitions/Task'
    title: 'Mediatype identifier: application/vnd.task+json; type=collection; view=default'
    type: array
  TaskPayload:
    description: Task payload
    example:
      cognitoAuthUserId: Ut qui dolores expedita est.
      taskName: Animi ipsum iusto.
      taskState: Quia autem sed et facilis earum deserunt.
    properties:
      cognitoAuthUserId:
        description: Cognito auth user ID
        example: Ut qui dolores expedita est.
        type: string
      taskName:
        description: task name
        example: Animi ipsum iusto.
        type: string
      taskState:
        description: task state
        example: Quia autem sed et facilis earum deserunt.
        type: string
    required:
    - cognitoAuthUserId
    - taskName
    - taskState
    title: TaskPayload
    type: object
  Tasks:
    description: Tasks (default view)
    example:
      tasks:
      - author: Corrupti eum fugit eaque.
        badge:
          description: Eaque facere voluptates consequatur nihil odit.
          id: Quam quae aut cumque consequatur asperiores.
          name: Hic illum veniam magni nam perferendis.
          recipients: 7796898160710639916
        description: Autem est.
        id: 1158327838646931452
        isAssigned: false
        isCompleted: true
        title: Et non.
        token: Corporis aut ullam.
        tokenAllocation: 4218755209323260807
        type: Odit vero eum fuga quo rerum.
    properties:
      tasks:
        $ref: '#/definitions/TaskCollection'
    required:
    - tasks
    title: 'Mediatype identifier: application/vnd.tasks+json; view=default'
    type: object
  User:
    description: A user (default view)
    example:
      cognitoAuthUserId: Natus est et harum labore id.
      id: Ut omnis deleniti qui aut exercitationem.
      name: Illum nesciunt itaque quam sit nihil.
      walletAddress: Voluptates dolore quas et.
    properties:
      cognitoAuthUserId:
        description: Cognito auth user ID
        example: Natus est et harum labore id.
        type: string
      id:
        description: Unique user ID
        example: Ut omnis deleniti qui aut exercitationem.
        type: string
      name:
        description: Name of user
        example: Illum nesciunt itaque quam sit nihil.
        type: string
      walletAddress:
        description: Wallet address
        example: Voluptates dolore quas et.
        type: string
    required:
    - id
    title: 'Mediatype identifier: application/vnd.user+json; view=default'
    type: object
  UserPayload:
    description: User payload
    example:
      cognitoAuthUserId: Modi eos possimus aliquam.
    properties:
      cognitoAuthUserId:
        description: Cognito auth user ID
        example: Modi eos possimus aliquam.
        type: string
    required:
    - cognitoAuthUserId
    title: UserPayload
    type: object
  Wallet:
    description: A wallet (default view)
    example:
      walletAddress: Eos quia repellat optio nam voluptatem.
    properties:
      walletAddress:
        description: wallet address
        example: Eos quia repellat optio nam voluptatem.
        type: string
    required:
    - walletAddress
    title: 'Mediatype identifier: application/vnd.wallet+json; view=default'
    type: object
  WalletPayload:
    description: Wallet payload
    example:
      cognitoAuthUserId: Magni necessitatibus debitis qui quos atque.
      walletAddress: 0x845fdD93Cca3aE9e380d5556818e6d0b902B977c
    properties:
      cognitoAuthUserId:
        description: Cognito auth user ID
        example: Magni necessitatibus debitis qui quos atque.
        type: string
      walletAddress:
        description: Wallet address
        example: 0x845fdD93Cca3aE9e380d5556818e6d0b902B977c
        pattern: ^0x[0-9a-fA-F]{40}$
        type: string
    required:
    - cognitoAuthUserId
    - walletAddress
    title: WalletPayload
    type: object
host: localhost:5000
info:
  description: A simple goa service
  title: The Coindrop API
  version: ""
paths:
  /v1/health:
    get:
      description: Returns OK if system is healthy
      operationId: healthcheck#show
      produces:
      - application/standard_error+json
      - application/vnd.healthcheck+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Healthcheck'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      summary: show healthcheck
      tags:
      - healthcheck
  /v1/quiz:
    get:
      description: Get quiz
      operationId: quiz#show
      parameters:
      - description: Quiz title
        in: query
        name: quizTitle
        required: false
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.quiz+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Quiz'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: show quiz
      tags:
      - quiz
  /v1/quiz/results:
    get:
      description: Get quiz results
      operationId: results#show
      parameters:
      - description: User ID
        in: query
        name: userId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: false
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.results+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Results'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: show results
      tags:
      - results
  /v1/tasks:
    get:
      description: Get user tasks
      operationId: tasks#show
      parameters:
      - description: User ID
        in: query
        name: userId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: false
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.tasks+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Tasks'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: show tasks
      tags:
      - tasks
    post:
      description: Update user task state
      operationId: tasks#update
      parameters:
      - description: Task payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/TaskPayload'
      produces:
      - application/standard_error+json
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: update tasks
      tags:
      - tasks
  /v1/users:
    post:
      description: Create a new user
      operationId: user#create
      parameters:
      - description: User payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserPayload'
      produces:
      - application/standard_error+json
      - application/vnd.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: create user
      tags:
      - user
  /v1/users/{userId}:
    get:
      description: Get user by id
      operationId: user#show
      parameters:
      - description: User ID
        in: path
        name: userId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: true
        type: string
      produces:
      - application/vnd.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "404":
          description: Not Found
      schemes:
      - http
      summary: show user
      tags:
      - user
  /v1/wallets:
    get:
      description: Get user wallet
      operationId: wallet#show
      parameters:
      - description: User ID
        in: query
        name: userId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: false
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.wallet+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Wallet'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: show wallet
      tags:
      - wallet
    post:
      description: Update user wallet
      operationId: wallet#update
      parameters:
      - description: Wallet payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/WalletPayload'
      produces:
      - application/standard_error+json
      - application/vnd.wallet+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Wallet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: update wallet
      tags:
      - wallet
produces:
- application/json
- application/xml
- application/gob
- application/x-gob
responses:
  NotFound:
    description: Not Found
  OK:
    description: OK
schemes:
- http
securityDefinitions:
  JWTAuth:
    type: basic
swagger: "2.0"
