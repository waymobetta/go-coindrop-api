consumes:
- application/json
- application/xml
- application/gob
- application/x-gob
definitions:
  Badge:
    description: Badge (default view)
    example:
      description: Eaque facere voluptates consequatur nihil odit.
      id: Quam quae aut cumque consequatur asperiores.
      name: Hic illum veniam magni nam perferendis.
      recipients: 7796898160710639916
    properties:
      description:
        description: badge description
        example: Eaque facere voluptates consequatur nihil odit.
        type: string
      id:
        description: badge ID
        example: Quam quae aut cumque consequatur asperiores.
        type: string
      name:
        description: badge name
        example: Hic illum veniam magni nam perferendis.
        type: string
      recipients:
        description: badge recipients
        example: 7796898160710639916
        format: int64
        type: integer
    required:
    - id
    - name
    - description
    - recipients
    title: 'Mediatype identifier: application/vnd.badge+json; view=default'
    type: object
  CreateTaskPayload:
    description: Create Task payload
    example:
      taskId: Natus neque pariatur reprehenderit officiis eos.
      userId: Sit amet non voluptatem id.
    properties:
      taskId:
        description: Task ID
        example: Natus neque pariatur reprehenderit officiis eos.
        type: string
      userId:
        description: User ID
        example: Sit amet non voluptatem id.
        type: string
    required:
    - userId
    - taskId
    title: CreateTaskPayload
    type: object
  CreateUserPayload:
    description: Create Reddit User payload
    example:
      userId: 9302608f-f6a4-4004-b088-63e5fb43cc26
      username: Ea porro sunt facilis alias.
    properties:
      userId:
        description: User ID
        example: 9302608f-f6a4-4004-b088-63e5fb43cc26
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        type: string
      username:
        description: Username
        example: Ea porro sunt facilis alias.
        type: string
    required:
    - userId
    - username
    title: CreateUserPayload
    type: object
  Healthcheck:
    description: Health check (default view)
    example:
      status: Ut unde aliquam voluptatibus.
    properties:
      status:
        description: Status
        example: Ut unde aliquam voluptatibus.
        type: string
    required:
    - status
    title: 'Mediatype identifier: application/vnd.healthcheck+json; view=default'
    type: object
  Quiz:
    description: Quiz (default view)
    example:
      fields:
      - answer: Iure amet.
        question: Non ut.
      id: Corrupti eum fugit eaque.
      title: Autem est.
      userId: Omnis labore.
    properties:
      fields:
        $ref: '#/definitions/Quiz-FieldsCollection'
      id:
        description: Quiz ID
        example: Corrupti eum fugit eaque.
        type: string
      title:
        description: Quiz title
        example: Autem est.
        type: string
      userId:
        description: Quiz user ID
        example: Omnis labore.
        type: string
    required:
    - id
    - title
    - userId
    - fields
    title: 'Mediatype identifier: application/vnd.quiz+json; view=default'
    type: object
  Quiz-Fields:
    description: Quiz fields (default view)
    example:
      answer: Iure amet.
      question: Non ut.
    properties:
      answer:
        description: Answer
        example: Iure amet.
        type: string
      question:
        description: Question
        example: Non ut.
        type: string
    required:
    - question
    - answer
    title: 'Mediatype identifier: application/vnd.quiz-fields+json; view=default'
    type: object
  Quiz-FieldsCollection:
    description: Quiz-FieldsCollection is the media type for an array of Quiz-Fields
      (default view)
    example:
    - answer: Iure amet.
      question: Non ut.
    - answer: Iure amet.
      question: Non ut.
    - answer: Iure amet.
      question: Non ut.
    items:
      $ref: '#/definitions/Quiz-Fields'
    title: 'Mediatype identifier: application/vnd.quiz-fields+json; type=collection;
      view=default'
    type: array
  QuizCollection:
    description: QuizCollection is the media type for an array of Quiz (default view)
    example:
    - fields:
      - answer: Iure amet.
        question: Non ut.
      id: Corrupti eum fugit eaque.
      title: Autem est.
      userId: Omnis labore.
    items:
      $ref: '#/definitions/Quiz'
    title: 'Mediatype identifier: application/vnd.quiz+json; type=collection; view=default'
    type: array
  QuizPayload:
    description: Quiz payload
    example:
      title: Aut qui nisi dolore ipsa.
    properties:
      title:
        description: Title
        example: Aut qui nisi dolore ipsa.
        type: string
    required:
    - title
    title: QuizPayload
    type: object
  Reddituser:
    description: A Reddit User (default view)
    example:
      commentKarma: 8191542477392582868
      id: 9302608f-f6a4-4004-b088-63e5fb43cc26
      linkKarma: 4709450809783776723
      subreddits:
      - Rerum saepe adipisci.
      - Rerum saepe adipisci.
      - Rerum saepe adipisci.
      trophies:
      - Velit quos rerum et natus est et.
      userId: 9302608f-f6a4-4004-b088-63e5fb43cc26
      username: Labore id modi ut omnis deleniti.
      verification:
        confirmedVerificationCode: Aut exercitationem omnis illum.
        postedVerificationCode: Itaque quam sit nihil deleniti.
        verified: false
    properties:
      commentKarma:
        description: Comment Karma
        example: 8191542477392582868
        format: int64
        type: integer
      id:
        description: ID
        example: 9302608f-f6a4-4004-b088-63e5fb43cc26
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        type: string
      linkKarma:
        description: Link Karma
        example: 4709450809783776723
        format: int64
        type: integer
      subreddits:
        description: User subreddits
        example:
        - Rerum saepe adipisci.
        - Rerum saepe adipisci.
        - Rerum saepe adipisci.
        items:
          example: Rerum saepe adipisci.
          type: string
        type: array
      trophies:
        description: User trophies
        example:
        - Velit quos rerum et natus est et.
        items:
          example: Velit quos rerum et natus est et.
          type: string
        type: array
      userId:
        description: User ID
        example: 9302608f-f6a4-4004-b088-63e5fb43cc26
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        type: string
      username:
        description: Username
        example: Labore id modi ut omnis deleniti.
        type: string
      verification:
        $ref: '#/definitions/Verification'
    required:
    - id
    - userId
    - username
    - linkKarma
    - commentKarma
    - trophies
    - subreddits
    - verification
    title: 'Mediatype identifier: application/vnd.reddituser+json; view=default'
    type: object
  Results:
    description: Quiz results (default view)
    example:
      quizResultsList: "1980-06-16T06:57:41Z"
    properties:
      quizResultsList:
        description: quiz results list
        example: "1980-06-16T06:57:41Z"
    required:
    - quizResultsList
    title: 'Mediatype identifier: application/vnd.results+json; view=default'
    type: object
  Standard_error:
    description: A standard error response (default view)
    example:
      code: 400
      message: Bad Request
    properties:
      code:
        description: A code that describes the error
        example: 400
        format: int64
        type: integer
      message:
        description: A message that describes the error
        example: Bad Request
        type: string
    required:
    - code
    - message
    title: 'Mediatype identifier: application/standard_error+json; view=default'
    type: object
  Task:
    description: Task (default view)
    example:
      author: Repellat optio nam.
      badge:
        description: Eaque facere voluptates consequatur nihil odit.
        id: Quam quae aut cumque consequatur asperiores.
        name: Hic illum veniam magni nam perferendis.
        recipients: 7796898160710639916
      description: Quibusdam ut qui dolores expedita est.
      id: Animi ipsum iusto.
      title: Quia autem sed et facilis earum deserunt.
      token: Modi eos possimus aliquam.
      tokenAllocation: 6357675523170031584
      type: Necessitatibus debitis qui quos.
    properties:
      author:
        description: task author
        example: Repellat optio nam.
        type: string
      badge:
        $ref: '#/definitions/Badge'
      description:
        description: task description
        example: Quibusdam ut qui dolores expedita est.
        type: string
      id:
        description: task ID
        example: Animi ipsum iusto.
        type: string
      title:
        description: task title
        example: Quia autem sed et facilis earum deserunt.
        type: string
      token:
        description: task token
        example: Modi eos possimus aliquam.
        type: string
      tokenAllocation:
        description: token allocation
        example: 6357675523170031584
        format: int64
        type: integer
      type:
        description: task type
        example: Necessitatibus debitis qui quos.
        type: string
    required:
    - id
    - title
    - type
    - author
    - description
    - token
    - tokenAllocation
    - badge
    title: 'Mediatype identifier: application/vnd.task+json; view=default'
    type: object
  TaskCollection:
    description: TaskCollection is the media type for an array of Task (default view)
    example:
    - author: Repellat optio nam.
      badge:
        description: Eaque facere voluptates consequatur nihil odit.
        id: Quam quae aut cumque consequatur asperiores.
        name: Hic illum veniam magni nam perferendis.
        recipients: 7796898160710639916
      description: Quibusdam ut qui dolores expedita est.
      id: Animi ipsum iusto.
      title: Quia autem sed et facilis earum deserunt.
      token: Modi eos possimus aliquam.
      tokenAllocation: 6357675523170031584
      type: Necessitatibus debitis qui quos.
    - author: Repellat optio nam.
      badge:
        description: Eaque facere voluptates consequatur nihil odit.
        id: Quam quae aut cumque consequatur asperiores.
        name: Hic illum veniam magni nam perferendis.
        recipients: 7796898160710639916
      description: Quibusdam ut qui dolores expedita est.
      id: Animi ipsum iusto.
      title: Quia autem sed et facilis earum deserunt.
      token: Modi eos possimus aliquam.
      tokenAllocation: 6357675523170031584
      type: Necessitatibus debitis qui quos.
    - author: Repellat optio nam.
      badge:
        description: Eaque facere voluptates consequatur nihil odit.
        id: Quam quae aut cumque consequatur asperiores.
        name: Hic illum veniam magni nam perferendis.
        recipients: 7796898160710639916
      description: Quibusdam ut qui dolores expedita est.
      id: Animi ipsum iusto.
      title: Quia autem sed et facilis earum deserunt.
      token: Modi eos possimus aliquam.
      tokenAllocation: 6357675523170031584
      type: Necessitatibus debitis qui quos.
    items:
      $ref: '#/definitions/Task'
    title: 'Mediatype identifier: application/vnd.task+json; type=collection; view=default'
    type: array
  TaskPayload:
    description: Task payload
    example:
      completed: true
    properties:
      completed:
        description: Task completed
        example: true
        type: boolean
    required:
    - completed
    title: TaskPayload
    type: object
  Tasks:
    description: Tasks (default view)
    example:
      tasks:
      - author: Repellat optio nam.
        badge:
          description: Eaque facere voluptates consequatur nihil odit.
          id: Quam quae aut cumque consequatur asperiores.
          name: Hic illum veniam magni nam perferendis.
          recipients: 7796898160710639916
        description: Quibusdam ut qui dolores expedita est.
        id: Animi ipsum iusto.
        title: Quia autem sed et facilis earum deserunt.
        token: Modi eos possimus aliquam.
        tokenAllocation: 6357675523170031584
        type: Necessitatibus debitis qui quos.
      - author: Repellat optio nam.
        badge:
          description: Eaque facere voluptates consequatur nihil odit.
          id: Quam quae aut cumque consequatur asperiores.
          name: Hic illum veniam magni nam perferendis.
          recipients: 7796898160710639916
        description: Quibusdam ut qui dolores expedita est.
        id: Animi ipsum iusto.
        title: Quia autem sed et facilis earum deserunt.
        token: Modi eos possimus aliquam.
        tokenAllocation: 6357675523170031584
        type: Necessitatibus debitis qui quos.
    properties:
      tasks:
        $ref: '#/definitions/TaskCollection'
    required:
    - tasks
    title: 'Mediatype identifier: application/vnd.tasks+json; view=default'
    type: object
  UpdateUserPayload:
    description: Update Reddit User payload
    example:
      userId: 9302608f-f6a4-4004-b088-63e5fb43cc26
      username: Qui rerum totam quia amet reiciendis velit.
    properties:
      userId:
        description: User ID
        example: 9302608f-f6a4-4004-b088-63e5fb43cc26
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        type: string
      username:
        description: Reddit Username
        example: Qui rerum totam quia amet reiciendis velit.
        type: string
    required:
    - userId
    - username
    title: UpdateUserPayload
    type: object
  User:
    description: A user (default view)
    example:
      cognitoAuthUserId: Animi sint sunt voluptatum recusandae facilis perferendis.
      id: Ut et non enim.
      name: Officiis ad quis.
      walletAddress: Exercitationem dignissimos est dolores sequi cumque.
    properties:
      cognitoAuthUserId:
        description: Cognito auth user ID
        example: Animi sint sunt voluptatum recusandae facilis perferendis.
        type: string
      id:
        description: Unique user ID
        example: Ut et non enim.
        type: string
      name:
        description: Name of user
        example: Officiis ad quis.
        type: string
      walletAddress:
        description: Wallet address
        example: Exercitationem dignissimos est dolores sequi cumque.
        type: string
    required:
    - id
    title: 'Mediatype identifier: application/vnd.user+json; view=default'
    type: object
  UserPayload:
    description: User payload
    example:
      cognitoAuthUserId: Et molestias sed possimus enim et.
    properties:
      cognitoAuthUserId:
        description: Cognito auth user ID
        example: Et molestias sed possimus enim et.
        type: string
    required:
    - cognitoAuthUserId
    title: UserPayload
    type: object
  Verification:
    description: Account Verification (default view)
    example:
      confirmedVerificationCode: Aut exercitationem omnis illum.
      postedVerificationCode: Itaque quam sit nihil deleniti.
      verified: false
    properties:
      confirmedVerificationCode:
        description: Confirmed Verification Code
        example: Aut exercitationem omnis illum.
        type: string
      postedVerificationCode:
        description: Posted Verification Code
        example: Itaque quam sit nihil deleniti.
        type: string
      verified:
        description: Account Verified Flag
        example: false
        type: boolean
    required:
    - postedVerificationCode
    - confirmedVerificationCode
    - verified
    title: 'Mediatype identifier: application/vnd.verification+json; view=default'
    type: object
  Wallet:
    description: A wallet (default view)
    example:
      address: Suscipit error ea.
    properties:
      address:
        description: wallet address
        example: Suscipit error ea.
        type: string
    required:
    - address
    title: 'Mediatype identifier: application/vnd.wallet+json; view=default'
    type: object
  WalletPayload:
    description: Wallet payload
    example:
      walletAddress: 0x845fdD93Cca3aE9e380d5556818e6d0b902B977c
    properties:
      walletAddress:
        description: Wallet address
        example: 0x845fdD93Cca3aE9e380d5556818e6d0b902B977c
        pattern: ^0x[0-9a-fA-F]{40}$
        type: string
    required:
    - walletAddress
    title: WalletPayload
    type: object
host: localhost:5000
info:
  description: A simple goa service
  title: The Coindrop API
  version: ""
paths:
  /v1/health:
    get:
      description: Returns OK if system is healthy
      operationId: healthcheck#show
      produces:
      - application/standard_error+json
      - application/vnd.healthcheck+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Healthcheck'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      summary: show healthcheck
      tags:
      - healthcheck
  /v1/quiz/results:
    get:
      description: Get quiz results
      operationId: results#show
      parameters:
      - description: User ID
        in: query
        name: userId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: false
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.results+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Results'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: show results
      tags:
      - results
  /v1/quizzes:
    get:
      description: Get quizzes
      operationId: quizzes#list
      produces:
      - application/standard_error+json
      - application/vnd.quiz+json; type=collection
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/QuizCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: list quizzes
      tags:
      - quizzes
    post:
      description: Create quiz
      operationId: quizzes#create
      parameters:
      - description: Quiz payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QuizPayload'
      produces:
      - application/standard_error+json
      - application/vnd.quiz+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Quiz'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: create quizzes
      tags:
      - quizzes
  /v1/quizzes/{quizId}:
    get:
      description: Get quizzes
      operationId: quizzes#show
      parameters:
      - description: Quiz ID
        in: path
        name: quizId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: true
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.quiz+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Quiz'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: show quizzes
      tags:
      - quizzes
  /v1/social/reddit/harvest:
    post:
      description: Update Reddit User Info
      operationId: redditharvest#update
      parameters:
      - description: Update Reddit User payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateUserPayload'
      produces:
      - application/standard_error+json
      - application/vnd.reddituser+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Reddituser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: update redditharvest
      tags:
      - redditharvest
  /v1/social/reddit/userid:
    get:
      description: Get Reddit User
      operationId: reddit#show
      parameters:
      - description: User ID
        in: query
        name: userId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: false
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.reddituser+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Reddituser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: show reddit
      tags:
      - reddit
    post:
      description: Create Reddit User
      operationId: reddit#create
      parameters:
      - description: Create Reddit User payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateUserPayload'
      produces:
      - application/standard_error+json
      - application/vnd.reddituser+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Reddituser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: create reddit
      tags:
      - reddit
  /v1/social/reddit/userid/verify:
    get:
      description: 'Get '
      operationId: verifyreddit#show
      parameters:
      - description: User ID
        in: query
        name: userId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: false
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.reddituser+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Reddituser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: show verifyreddit
      tags:
      - verifyreddit
    post:
      description: Update Reddit Verification Code
      operationId: verifyreddit#update
      parameters:
      - description: Update Reddit User payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateUserPayload'
      produces:
      - application/standard_error+json
      - application/vnd.reddituser+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Reddituser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: update verifyreddit
      tags:
      - verifyreddit
  /v1/tasks:
    get:
      description: Get list of user tasks
      operationId: tasks#list
      parameters:
      - description: User ID
        in: query
        name: userId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: false
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.tasks+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Tasks'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: list tasks
      tags:
      - tasks
    post:
      description: Create a user task
      operationId: tasks#create
      parameters:
      - description: Create Task payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateTaskPayload'
      produces:
      - application/standard_error+json
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: create tasks
      tags:
      - tasks
  /v1/tasks/{taskId}:
    get:
      description: Get single task
      operationId: tasks#show
      parameters:
      - description: Task ID
        in: path
        name: taskId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: true
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.task+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: show tasks
      tags:
      - tasks
    post:
      description: Update user task state
      operationId: tasks#update
      parameters:
      - description: Task ID
        in: path
        name: taskId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: true
        type: string
      - description: Task payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/TaskPayload'
      produces:
      - application/standard_error+json
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: update tasks
      tags:
      - tasks
  /v1/users:
    get:
      description: Get user ID mapped to Cognito auth user ID
      operationId: users#list
      parameters:
      - description: Cognito Auth User ID
        in: query
        name: cognitoAuthUserId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: false
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      summary: list users
      tags:
      - users
    post:
      description: Create a new user
      operationId: users#create
      parameters:
      - description: User payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserPayload'
      produces:
      - application/standard_error+json
      - application/vnd.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      summary: create users
      tags:
      - users
  /v1/users/{userId}:
    get:
      description: Get user by id
      operationId: users#show
      parameters:
      - description: User ID
        in: path
        name: userId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: true
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      summary: show users
      tags:
      - users
  /v1/wallets:
    get:
      description: Get user wallet
      operationId: wallets#show
      parameters:
      - description: User ID
        in: query
        name: userId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: false
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.wallet+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Wallet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: show wallets
      tags:
      - wallets
    post:
      description: Update user wallet
      operationId: wallets#update
      parameters:
      - description: Wallet payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/WalletPayload'
      produces:
      - application/standard_error+json
      - application/vnd.wallet+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Wallet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: update wallets
      tags:
      - wallets
produces:
- application/json
- application/xml
- application/gob
- application/x-gob
responses:
  OK:
    description: OK
schemes:
- http
securityDefinitions:
  JWTAuth:
    type: basic
swagger: "2.0"
