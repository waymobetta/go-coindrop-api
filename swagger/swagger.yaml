consumes:
- application/json
- application/xml
- application/gob
- application/x-gob
definitions:
  Badge:
    description: Badge (default view)
    example:
      description: Eaque facere voluptates consequatur nihil odit.
      id: Quam quae aut cumque consequatur asperiores.
      name: Hic illum veniam magni nam perferendis.
      recipients: 7796898160710639916
    properties:
      description:
        description: badge description
        example: Eaque facere voluptates consequatur nihil odit.
        type: string
      id:
        description: badge ID
        example: Quam quae aut cumque consequatur asperiores.
        type: string
      name:
        description: badge name
        example: Hic illum veniam magni nam perferendis.
        type: string
      recipients:
        description: badge recipients
        example: 7796898160710639916
        format: int64
        type: integer
    required:
    - id
    - name
    - description
    - recipients
    title: 'Mediatype identifier: application/vnd.badge+json; view=default'
    type: object
  Healthcheck:
    description: Health check (default view)
    example:
      status: Ut unde aliquam voluptatibus.
    properties:
      status:
        description: Status
        example: Ut unde aliquam voluptatibus.
        type: string
    required:
    - status
    title: 'Mediatype identifier: application/vnd.healthcheck+json; view=default'
    type: object
  Quiz:
    description: Quiz (default view)
    example:
      quizObject: false
    properties:
      quizObject:
        description: Quiz object
        example: false
    required:
    - quizObject
    title: 'Mediatype identifier: application/vnd.quiz+json; view=default'
    type: object
  RedditUserPayload:
    description: Reddit User payload
    example:
      id: 0x845fdD93Cca3aE9e380d5556818e6d0b902B977c
    properties:
      id:
        description: User ID
        example: 0x845fdD93Cca3aE9e380d5556818e6d0b902B977c
        pattern: ^0x[0-9a-fA-F]{40}$
        type: string
    required:
    - id
    title: RedditUserPayload
    type: object
  Reddituser:
    description: A Reddit User (default view)
    example:
      accountCreatedUTC: 0.9361388769533323
      commentKarma: 3184226882029016734
      id: 9302608f-f6a4-4004-b088-63e5fb43cc26
      linkKarma: 7391759956897262924
      subreddits:
      - Quis corrupti eum fugit eaque reiciendis.
      - Quis corrupti eum fugit eaque reiciendis.
      trophies:
      - Corporis omnis labore autem et.
      userId: Et corporis aut.
      username: Dolorem officiis odit vero eum fuga quo.
      verification:
        confirmedVerificationCode: Saepe adipisci error itaque velit quos.
        postedVerificationCode: Et natus est et harum labore.
        verified: false
    properties:
      accountCreatedUTC:
        description: Account Created Timestamp
        example: 0.9361388769533323
        format: double
        type: number
      commentKarma:
        description: Comment Karma
        example: 3184226882029016734
        format: int64
        type: integer
      id:
        description: ID
        example: 9302608f-f6a4-4004-b088-63e5fb43cc26
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        type: string
      linkKarma:
        description: Link Karma
        example: 7391759956897262924
        format: int64
        type: integer
      subreddits:
        description: User subreddits
        example:
        - Quis corrupti eum fugit eaque reiciendis.
        - Quis corrupti eum fugit eaque reiciendis.
        items:
          example: Quis corrupti eum fugit eaque reiciendis.
          type: string
        type: array
      trophies:
        description: User trophies
        example:
        - Corporis omnis labore autem et.
        items:
          example: Corporis omnis labore autem et.
          type: string
        type: array
      userId:
        description: User ID
        example: Et corporis aut.
        type: string
      username:
        description: Username
        example: Dolorem officiis odit vero eum fuga quo.
        type: string
      verification:
        $ref: '#/definitions/Verification'
    required:
    - id
    - userId
    - username
    - linkKarma
    - commentKarma
    - accountCreatedUTC
    - trophies
    - subreddits
    - verification
    title: 'Mediatype identifier: application/vnd.reddituser+json; view=default'
    type: object
  Results:
    description: Quiz results (default view)
    example:
      quizResultsList: "1987-02-18T04:45:14Z"
    properties:
      quizResultsList:
        description: quiz results list
        example: "1987-02-18T04:45:14Z"
    required:
    - quizResultsList
    title: 'Mediatype identifier: application/vnd.results+json; view=default'
    type: object
  Standard_error:
    description: A standard error response (default view)
    example:
      code: 400
      message: Bad Request
    properties:
      code:
        description: A code that describes the error
        example: 400
        format: int64
        type: integer
      message:
        description: A message that describes the error
        example: Bad Request
        type: string
    required:
    - code
    - message
    title: 'Mediatype identifier: application/standard_error+json; view=default'
    type: object
  Task:
    description: Task (default view)
    example:
      author: Quam sit nihil deleniti.
      badge:
        description: Eaque facere voluptates consequatur nihil odit.
        id: Quam quae aut cumque consequatur asperiores.
        name: Hic illum veniam magni nam perferendis.
        recipients: 7796898160710639916
      description: Dolore quas et.
      id: Eos quia repellat optio nam voluptatem.
      title: Ut qui dolores expedita est.
      token: Animi ipsum iusto.
      tokenAllocation: 7420824659413925301
      type: Autem sed et facilis.
    properties:
      author:
        description: task author
        example: Quam sit nihil deleniti.
        type: string
      badge:
        $ref: '#/definitions/Badge'
      description:
        description: task description
        example: Dolore quas et.
        type: string
      id:
        description: task ID
        example: Eos quia repellat optio nam voluptatem.
        type: string
      title:
        description: task title
        example: Ut qui dolores expedita est.
        type: string
      token:
        description: task token
        example: Animi ipsum iusto.
        type: string
      tokenAllocation:
        description: token allocation
        example: 7420824659413925301
        format: int64
        type: integer
      type:
        description: task type
        example: Autem sed et facilis.
        type: string
    required:
    - id
    - title
    - type
    - author
    - description
    - token
    - tokenAllocation
    - badge
    title: 'Mediatype identifier: application/vnd.task+json; view=default'
    type: object
  TaskCollection:
    description: TaskCollection is the media type for an array of Task (default view)
    example:
    - author: Quam sit nihil deleniti.
      badge:
        description: Eaque facere voluptates consequatur nihil odit.
        id: Quam quae aut cumque consequatur asperiores.
        name: Hic illum veniam magni nam perferendis.
        recipients: 7796898160710639916
      description: Dolore quas et.
      id: Eos quia repellat optio nam voluptatem.
      title: Ut qui dolores expedita est.
      token: Animi ipsum iusto.
      tokenAllocation: 7420824659413925301
      type: Autem sed et facilis.
    - author: Quam sit nihil deleniti.
      badge:
        description: Eaque facere voluptates consequatur nihil odit.
        id: Quam quae aut cumque consequatur asperiores.
        name: Hic illum veniam magni nam perferendis.
        recipients: 7796898160710639916
      description: Dolore quas et.
      id: Eos quia repellat optio nam voluptatem.
      title: Ut qui dolores expedita est.
      token: Animi ipsum iusto.
      tokenAllocation: 7420824659413925301
      type: Autem sed et facilis.
    - author: Quam sit nihil deleniti.
      badge:
        description: Eaque facere voluptates consequatur nihil odit.
        id: Quam quae aut cumque consequatur asperiores.
        name: Hic illum veniam magni nam perferendis.
        recipients: 7796898160710639916
      description: Dolore quas et.
      id: Eos quia repellat optio nam voluptatem.
      title: Ut qui dolores expedita est.
      token: Animi ipsum iusto.
      tokenAllocation: 7420824659413925301
      type: Autem sed et facilis.
    items:
      $ref: '#/definitions/Task'
    title: 'Mediatype identifier: application/vnd.task+json; type=collection; view=default'
    type: array
  TaskPayload:
    description: Task payload
    example:
      cognitoAuthUserId: At eligendi sit sed nobis.
      taskName: Non suscipit error ea incidunt aut qui.
      taskState: Dolore ipsa et.
    properties:
      cognitoAuthUserId:
        description: Cognito auth user ID
        example: At eligendi sit sed nobis.
        type: string
      taskName:
        description: task name
        example: Non suscipit error ea incidunt aut qui.
        type: string
      taskState:
        description: task state
        example: Dolore ipsa et.
        type: string
    required:
    - cognitoAuthUserId
    - taskName
    - taskState
    title: TaskPayload
    type: object
  Tasks:
    description: Tasks (default view)
    example:
      tasks:
      - author: Quam sit nihil deleniti.
        badge:
          description: Eaque facere voluptates consequatur nihil odit.
          id: Quam quae aut cumque consequatur asperiores.
          name: Hic illum veniam magni nam perferendis.
          recipients: 7796898160710639916
        description: Dolore quas et.
        id: Eos quia repellat optio nam voluptatem.
        title: Ut qui dolores expedita est.
        token: Animi ipsum iusto.
        tokenAllocation: 7420824659413925301
        type: Autem sed et facilis.
      - author: Quam sit nihil deleniti.
        badge:
          description: Eaque facere voluptates consequatur nihil odit.
          id: Quam quae aut cumque consequatur asperiores.
          name: Hic illum veniam magni nam perferendis.
          recipients: 7796898160710639916
        description: Dolore quas et.
        id: Eos quia repellat optio nam voluptatem.
        title: Ut qui dolores expedita est.
        token: Animi ipsum iusto.
        tokenAllocation: 7420824659413925301
        type: Autem sed et facilis.
      - author: Quam sit nihil deleniti.
        badge:
          description: Eaque facere voluptates consequatur nihil odit.
          id: Quam quae aut cumque consequatur asperiores.
          name: Hic illum veniam magni nam perferendis.
          recipients: 7796898160710639916
        description: Dolore quas et.
        id: Eos quia repellat optio nam voluptatem.
        title: Ut qui dolores expedita est.
        token: Animi ipsum iusto.
        tokenAllocation: 7420824659413925301
        type: Autem sed et facilis.
    properties:
      tasks:
        $ref: '#/definitions/TaskCollection'
    required:
    - tasks
    title: 'Mediatype identifier: application/vnd.tasks+json; view=default'
    type: object
  User:
    description: A user (default view)
    example:
      cognitoAuthUserId: Magni necessitatibus debitis qui quos atque.
      id: Excepturi non voluptas dolor eligendi ipsum eius.
      name: Animi sint sunt voluptatum recusandae facilis perferendis.
      walletAddress: Ut et non enim.
    properties:
      cognitoAuthUserId:
        description: Cognito auth user ID
        example: Magni necessitatibus debitis qui quos atque.
        type: string
      id:
        description: Unique user ID
        example: Excepturi non voluptas dolor eligendi ipsum eius.
        type: string
      name:
        description: Name of user
        example: Animi sint sunt voluptatum recusandae facilis perferendis.
        type: string
      walletAddress:
        description: Wallet address
        example: Ut et non enim.
        type: string
    required:
    - id
    title: 'Mediatype identifier: application/vnd.user+json; view=default'
    type: object
  UserPayload:
    description: User payload
    example:
      cognitoAuthUserId: Porro sunt facilis alias blanditiis qui.
    properties:
      cognitoAuthUserId:
        description: Cognito auth user ID
        example: Porro sunt facilis alias blanditiis qui.
        type: string
    required:
    - cognitoAuthUserId
    title: UserPayload
    type: object
  Verification:
    description: Account Verification (default view)
    example:
      confirmedVerificationCode: Saepe adipisci error itaque velit quos.
      postedVerificationCode: Et natus est et harum labore.
      verified: false
    properties:
      confirmedVerificationCode:
        description: Confirmed Verification Code
        example: Saepe adipisci error itaque velit quos.
        type: string
      postedVerificationCode:
        description: Posted Verification Code
        example: Et natus est et harum labore.
        type: string
      verified:
        description: Account Verified Flag
        example: false
        type: boolean
    required:
    - postedVerificationCode
    - confirmedVerificationCode
    - verified
    title: 'Mediatype identifier: application/vnd.verification+json; view=default'
    type: object
  Wallet:
    description: A wallet (default view)
    example:
      walletAddress: Accusantium eos accusantium.
    properties:
      walletAddress:
        description: wallet address
        example: Accusantium eos accusantium.
        type: string
    required:
    - walletAddress
    title: 'Mediatype identifier: application/vnd.wallet+json; view=default'
    type: object
  WalletPayload:
    description: Wallet payload
    example:
      walletAddress: 0x845fdD93Cca3aE9e380d5556818e6d0b902B977c
    properties:
      walletAddress:
        description: Wallet address
        example: 0x845fdD93Cca3aE9e380d5556818e6d0b902B977c
        pattern: ^0x[0-9a-fA-F]{40}$
        type: string
    required:
    - walletAddress
    title: WalletPayload
    type: object
host: localhost:5000
info:
  description: A simple goa service
  title: The Coindrop API
  version: ""
paths:
  /v1/health:
    get:
      description: Returns OK if system is healthy
      operationId: healthcheck#show
      produces:
      - application/standard_error+json
      - application/vnd.healthcheck+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Healthcheck'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      summary: show healthcheck
      tags:
      - healthcheck
  /v1/quiz:
    get:
      description: Get quiz
      operationId: quiz#show
      parameters:
      - description: Quiz title
        in: query
        name: quizTitle
        required: false
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.quiz+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Quiz'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: show quiz
      tags:
      - quiz
  /v1/quiz/results:
    get:
      description: Get quiz results
      operationId: results#show
      parameters:
      - description: User ID
        in: query
        name: userId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: false
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.results+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Results'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: show results
      tags:
      - results
  /v1/social/reddit:
    get:
      description: 'Get '
      operationId: reddit#show
      parameters:
      - description: User ID
        in: query
        name: userId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: false
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.reddituser+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Reddituser'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: show reddit
      tags:
      - reddit
    post:
      description: Update Reddit User
      operationId: reddit#update
      parameters:
      - description: Reddit User payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/RedditUserPayload'
      produces:
      - application/standard_error+json
      - application/vnd.reddituser+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Reddituser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: update reddit
      tags:
      - reddit
  /v1/tasks:
    get:
      description: Get user tasks
      operationId: tasks#show
      parameters:
      - description: User ID
        in: query
        name: userId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: false
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.tasks+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Tasks'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: show tasks
      tags:
      - tasks
    post:
      description: Update user task state
      operationId: tasks#update
      parameters:
      - description: Task payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/TaskPayload'
      produces:
      - application/standard_error+json
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: update tasks
      tags:
      - tasks
  /v1/users:
    post:
      description: Create a new user
      operationId: user#create
      parameters:
      - description: User payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserPayload'
      produces:
      - application/standard_error+json
      - application/vnd.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      summary: create user
      tags:
      - user
  /v1/users/{userId}:
    get:
      description: Get user by id
      operationId: user#show
      parameters:
      - description: User ID
        in: path
        name: userId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: true
        type: string
      produces:
      - application/vnd.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "404":
          description: Not Found
      schemes:
      - http
      summary: show user
      tags:
      - user
  /v1/wallets:
    get:
      description: Get user wallet
      operationId: wallet#show
      parameters:
      - description: User ID
        in: query
        name: userId
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        required: false
        type: string
      produces:
      - application/standard_error+json
      - application/vnd.wallet+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Wallet'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: show wallet
      tags:
      - wallet
    post:
      description: Update user wallet
      operationId: wallet#update
      parameters:
      - description: Wallet payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/WalletPayload'
      produces:
      - application/standard_error+json
      - application/vnd.wallet+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Wallet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Standard_error'
        "404":
          description: Not Found
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/Standard_error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Standard_error'
      schemes:
      - http
      security:
      - JWTAuth: []
      summary: update wallet
      tags:
      - wallet
produces:
- application/json
- application/xml
- application/gob
- application/x-gob
responses:
  NotFound:
    description: Not Found
  OK:
    description: OK
schemes:
- http
securityDefinitions:
  JWTAuth:
    type: basic
swagger: "2.0"
