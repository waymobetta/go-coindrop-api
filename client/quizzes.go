// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "coindrop": quizzes Resource Client
//
// Command:
// $ goagen
// --design=github.com/waymobetta/go-coindrop-api/design
// --out=$(GOPATH)/src/github.com/waymobetta/go-coindrop-api
// --version=v1.4.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// ShowQuizzesPath computes a request path to the show action of quizzes.
func ShowQuizzesPath() string {

	return fmt.Sprintf("/v1/quizzes")
}

// Get quizzes
func (c *Client) ShowQuizzes(ctx context.Context, path string, quizTitle *string) (*http.Response, error) {
	req, err := c.NewShowQuizzesRequest(ctx, path, quizTitle)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowQuizzesRequest create the request corresponding to the show action endpoint of the quizzes resource.
func (c *Client) NewShowQuizzesRequest(ctx context.Context, path string, quizTitle *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if quizTitle != nil {
		values.Set("quizTitle", *quizTitle)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTAuthSigner != nil {
		if err := c.JWTAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
