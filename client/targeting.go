// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "coindrop": targeting Resource Client
//
// Command:
// $ goagen
// --design=github.com/waymobetta/go-coindrop-api/design
// --out=$(GOPATH)/src/github.com/waymobetta/go-coindrop-api
// --version=v1.4.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// DisplayTargetingPath computes a request path to the display action of targeting.
func DisplayTargetingPath(project string) string {
	param0 := project

	return fmt.Sprintf("/v1/targeting/users/%s", param0)
}

// Get list of eligible users
func (c *Client) DisplayTargeting(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDisplayTargetingRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDisplayTargetingRequest create the request corresponding to the display action endpoint of the targeting resource.
func (c *Client) NewDisplayTargetingRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTAuthSigner != nil {
		if err := c.JWTAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListTargetingPath computes a request path to the list action of targeting.
func ListTargetingPath() string {

	return fmt.Sprintf("/v1/targeting/users/reddit")
}

// Get list of all reddit users and their subreddits
func (c *Client) ListTargeting(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListTargetingRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListTargetingRequest create the request corresponding to the list action endpoint of the targeting resource.
func (c *Client) NewListTargetingRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTAuthSigner != nil {
		if err := c.JWTAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// SetTargetingPath computes a request path to the set action of targeting.
func SetTargetingPath() string {

	return fmt.Sprintf("/v1/targeting/tasks/set")
}

// Set users as eligible
func (c *Client) SetTargeting(ctx context.Context, path string, payload *SetTargetingPayload, contentType string) (*http.Response, error) {
	req, err := c.NewSetTargetingRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSetTargetingRequest create the request corresponding to the set action endpoint of the targeting resource.
func (c *Client) NewSetTargetingRequest(ctx context.Context, path string, payload *SetTargetingPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTAuthSigner != nil {
		if err := c.JWTAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
