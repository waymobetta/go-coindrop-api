// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "coindrop": stackoverflow Resource Client
//
// Command:
// $ goagen
// --design=github.com/waymobetta/go-coindrop-api/design
// --out=$(GOPATH)/src/github.com/waymobetta/go-coindrop-api
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// DisplayStackoverflowPath computes a request path to the display action of stackoverflow.
func DisplayStackoverflowPath(userID string) string {
	param0 := userID

	return fmt.Sprintf("/v1/social/stackoverflow/%s/verify", param0)
}

// Get Stack Overflow Verification
func (c *Client) DisplayStackoverflow(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDisplayStackoverflowRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDisplayStackoverflowRequest create the request corresponding to the display action endpoint of the stackoverflow resource.
func (c *Client) NewDisplayStackoverflowRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTAuthSigner != nil {
		if err := c.JWTAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ShowStackoverflowPath computes a request path to the show action of stackoverflow.
func ShowStackoverflowPath(userID string) string {
	param0 := userID

	return fmt.Sprintf("/v1/social/stackoverflow/%s", param0)
}

// Get Stack Overflow User
func (c *Client) ShowStackoverflow(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowStackoverflowRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowStackoverflowRequest create the request corresponding to the show action endpoint of the stackoverflow resource.
func (c *Client) NewShowStackoverflowRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTAuthSigner != nil {
		if err := c.JWTAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// UpdateStackoverflowPath computes a request path to the update action of stackoverflow.
func UpdateStackoverflowPath() string {

	return fmt.Sprintf("/v1/social/stackoverflow")
}

// Update stack overflow user info
func (c *Client) UpdateStackoverflow(ctx context.Context, path string, payload *CreateStackOverflowUserPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateStackoverflowRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateStackoverflowRequest create the request corresponding to the update action endpoint of the stackoverflow resource.
func (c *Client) NewUpdateStackoverflowRequest(ctx context.Context, path string, payload *CreateStackOverflowUserPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTAuthSigner != nil {
		if err := c.JWTAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// VerifyStackoverflowPath computes a request path to the verify action of stackoverflow.
func VerifyStackoverflowPath(userID string) string {
	param0 := userID

	return fmt.Sprintf("/v1/social/stackoverflow/%s/verify", param0)
}

// Update Stack Overflow Verification
func (c *Client) VerifyStackoverflow(ctx context.Context, path string, payload *VerificationPayload, contentType string) (*http.Response, error) {
	req, err := c.NewVerifyStackoverflowRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewVerifyStackoverflowRequest create the request corresponding to the verify action endpoint of the stackoverflow resource.
func (c *Client) NewVerifyStackoverflowRequest(ctx context.Context, path string, payload *VerificationPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTAuthSigner != nil {
		if err := c.JWTAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
