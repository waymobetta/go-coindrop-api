// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "coindrop": wallets Resource Client
//
// Command:
// $ goagen
// --design=github.com/waymobetta/go-coindrop-api/design
// --out=$(GOPATH)/src/github.com/waymobetta/go-coindrop-api
// --version=v1.4.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// ShowWalletsPath computes a request path to the show action of wallets.
func ShowWalletsPath() string {

	return fmt.Sprintf("/v1/wallets")
}

// Get user wallet
func (c *Client) ShowWallets(ctx context.Context, path string, userID *string) (*http.Response, error) {
	req, err := c.NewShowWalletsRequest(ctx, path, userID)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowWalletsRequest create the request corresponding to the show action endpoint of the wallets resource.
func (c *Client) NewShowWalletsRequest(ctx context.Context, path string, userID *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if userID != nil {
		values.Set("userId", *userID)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTAuthSigner != nil {
		if err := c.JWTAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// UpdateWalletsPath computes a request path to the update action of wallets.
func UpdateWalletsPath() string {

	return fmt.Sprintf("/v1/wallets")
}

// Update user wallet
func (c *Client) UpdateWallets(ctx context.Context, path string, payload *WalletPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateWalletsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateWalletsRequest create the request corresponding to the update action endpoint of the wallets resource.
func (c *Client) NewUpdateWalletsRequest(ctx context.Context, path string, payload *WalletPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTAuthSigner != nil {
		if err := c.JWTAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// VerifyWalletsPath computes a request path to the verify action of wallets.
func VerifyWalletsPath() string {

	return fmt.Sprintf("/v1/wallets/verify")
}

// Verify signed message
func (c *Client) VerifyWallets(ctx context.Context, path string, payload *WalletVerificationPayload, contentType string) (*http.Response, error) {
	req, err := c.NewVerifyWalletsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewVerifyWalletsRequest create the request corresponding to the verify action endpoint of the wallets resource.
func (c *Client) NewVerifyWalletsRequest(ctx context.Context, path string, payload *WalletVerificationPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTAuthSigner != nil {
		if err := c.JWTAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
