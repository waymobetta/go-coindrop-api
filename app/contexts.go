// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "coindrop": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/waymobetta/go-coindrop-api/design
// --out=$(GOPATH)/src/github.com/waymobetta/go-coindrop-api
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// ShowHealthcheckContext provides the healthcheck show action context.
type ShowHealthcheckContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowHealthcheckContext parses the incoming request URL and body, performs validations and creates the
// context used by the healthcheck controller show action.
func NewShowHealthcheckContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowHealthcheckContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowHealthcheckContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowHealthcheckContext) OK(r *Healthcheck) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.healthcheck+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowHealthcheckContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowHealthcheckContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowQuizContext provides the quiz show action context.
type ShowQuizContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	QuizTitle *string
}

// NewShowQuizContext parses the incoming request URL and body, performs validations and creates the
// context used by the quiz controller show action.
func NewShowQuizContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowQuizContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowQuizContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramQuizTitle := req.Params["quizTitle"]
	if len(paramQuizTitle) > 0 {
		rawQuizTitle := paramQuizTitle[0]
		rctx.QuizTitle = &rawQuizTitle
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowQuizContext) OK(r *Quiz) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.quiz+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowQuizContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// CreateRedditContext provides the reddit create action context.
type CreateRedditContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateUserPayload
}

// NewCreateRedditContext parses the incoming request URL and body, performs validations and creates the
// context used by the reddit controller create action.
func NewCreateRedditContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateRedditContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateRedditContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateRedditContext) OK(r *Reddituser) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.reddituser+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateRedditContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateRedditContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *CreateRedditContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateRedditContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowRedditContext provides the reddit show action context.
type ShowRedditContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID *string
}

// NewShowRedditContext parses the incoming request URL and body, performs validations and creates the
// context used by the reddit controller show action.
func NewShowRedditContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowRedditContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowRedditContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = &rawUserID
		if rctx.UserID != nil {
			if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, *rctx.UserID); !ok {
				err = goa.MergeErrors(err, goa.InvalidPatternError(`userId`, *rctx.UserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowRedditContext) OK(r *Reddituser) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.reddituser+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowRedditContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// ShowResultsContext provides the results show action context.
type ShowResultsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID *string
}

// NewShowResultsContext parses the incoming request URL and body, performs validations and creates the
// context used by the results controller show action.
func NewShowResultsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowResultsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowResultsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = &rawUserID
		if rctx.UserID != nil {
			if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, *rctx.UserID); !ok {
				err = goa.MergeErrors(err, goa.InvalidPatternError(`userId`, *rctx.UserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowResultsContext) OK(r *Results) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.results+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowResultsContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// ShowTasksContext provides the tasks show action context.
type ShowTasksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID *string
}

// NewShowTasksContext parses the incoming request URL and body, performs validations and creates the
// context used by the tasks controller show action.
func NewShowTasksContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowTasksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowTasksContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = &rawUserID
		if rctx.UserID != nil {
			if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, *rctx.UserID); !ok {
				err = goa.MergeErrors(err, goa.InvalidPatternError(`userId`, *rctx.UserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowTasksContext) OK(r *Tasks) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.tasks+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowTasksContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// UpdateTasksContext provides the tasks update action context.
type UpdateTasksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *TaskPayload
}

// NewUpdateTasksContext parses the incoming request URL and body, performs validations and creates the
// context used by the tasks controller update action.
func NewUpdateTasksContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateTasksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateTasksContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateTasksContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateTasksContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateTasksContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// Gone sends a HTTP response with status code 410.
func (ctx *UpdateTasksContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateTasksContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateUserContext provides the user create action context.
type CreateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *UserPayload
}

// NewCreateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller create action.
func NewCreateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateUserContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateUserContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// Gone sends a HTTP response with status code 410.
func (ctx *CreateUserContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateUserContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowUserContext provides the user show action context.
type ShowUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID string
}

// NewShowUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller show action.
func NewShowUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
		if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, rctx.UserID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`userId`, rctx.UserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowUserContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowVerifyredditContext provides the verifyreddit show action context.
type ShowVerifyredditContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID *string
}

// NewShowVerifyredditContext parses the incoming request URL and body, performs validations and creates the
// context used by the verifyreddit controller show action.
func NewShowVerifyredditContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowVerifyredditContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowVerifyredditContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = &rawUserID
		if rctx.UserID != nil {
			if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, *rctx.UserID); !ok {
				err = goa.MergeErrors(err, goa.InvalidPatternError(`userId`, *rctx.UserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowVerifyredditContext) OK(r *Reddituser) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.reddituser+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowVerifyredditContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// UpdateVerifyredditContext provides the verifyreddit update action context.
type UpdateVerifyredditContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *UpdateUserPayload
}

// NewUpdateVerifyredditContext parses the incoming request URL and body, performs validations and creates the
// context used by the verifyreddit controller update action.
func NewUpdateVerifyredditContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateVerifyredditContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateVerifyredditContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateVerifyredditContext) OK(r *Reddituser) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.reddituser+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateVerifyredditContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateVerifyredditContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// Gone sends a HTTP response with status code 410.
func (ctx *UpdateVerifyredditContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateVerifyredditContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowWalletContext provides the wallet show action context.
type ShowWalletContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID *string
}

// NewShowWalletContext parses the incoming request URL and body, performs validations and creates the
// context used by the wallet controller show action.
func NewShowWalletContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowWalletContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowWalletContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = &rawUserID
		if rctx.UserID != nil {
			if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, *rctx.UserID); !ok {
				err = goa.MergeErrors(err, goa.InvalidPatternError(`userId`, *rctx.UserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowWalletContext) OK(r *Wallet) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.wallet+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowWalletContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// UpdateWalletContext provides the wallet update action context.
type UpdateWalletContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *WalletPayload
}

// NewUpdateWalletContext parses the incoming request URL and body, performs validations and creates the
// context used by the wallet controller update action.
func NewUpdateWalletContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateWalletContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateWalletContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateWalletContext) OK(r *Wallet) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.wallet+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateWalletContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateWalletContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// Gone sends a HTTP response with status code 410.
func (ctx *UpdateWalletContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateWalletContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}
