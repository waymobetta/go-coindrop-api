// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "coindrop": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/waymobetta/go-coindrop-api/design
// --out=$(GOPATH)/src/github.com/waymobetta/go-coindrop-api
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// CreateBadgesContext provides the badges create action context.
type CreateBadgesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateBadgePayload
}

// NewCreateBadgesContext parses the incoming request URL and body, performs validations and creates the
// context used by the badges controller create action.
func NewCreateBadgesContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateBadgesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateBadgesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateBadgesContext) OK(r *Badge) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.badge+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateBadgesContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateBadgesContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *CreateBadgesContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateBadgesContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListBadgesContext provides the badges list action context.
type ListBadgesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID string
}

// NewListBadgesContext parses the incoming request URL and body, performs validations and creates the
// context used by the badges controller list action.
func NewListBadgesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBadgesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBadgesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
		if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, rctx.UserID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`userId`, rctx.UserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBadgesContext) OK(r *Badges) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.badges+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListBadgesContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBadgesContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ListBadgesContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBadgesContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowBadgesContext provides the badges show action context.
type ShowBadgesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowBadgesContext parses the incoming request URL and body, performs validations and creates the
// context used by the badges controller show action.
func NewShowBadgesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowBadgesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowBadgesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowBadgesContext) OK(r BadgeCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.badge+json; type=collection")
	}
	if r == nil {
		r = BadgeCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowBadgesContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowBadgesContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ShowBadgesContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowBadgesContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowHealthcheckContext provides the healthcheck show action context.
type ShowHealthcheckContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowHealthcheckContext parses the incoming request URL and body, performs validations and creates the
// context used by the healthcheck controller show action.
func NewShowHealthcheckContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowHealthcheckContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowHealthcheckContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowHealthcheckContext) OK(r *Healthcheck) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.healthcheck+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowHealthcheckContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowHealthcheckContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ShowHealthcheckContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowHealthcheckContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateProfilesContext provides the profiles create action context.
type CreateProfilesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *ProfilePayload
}

// NewCreateProfilesContext parses the incoming request URL and body, performs validations and creates the
// context used by the profiles controller create action.
func NewCreateProfilesContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateProfilesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateProfilesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateProfilesContext) OK(r *Profile) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.profile+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateProfilesContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateProfilesContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *CreateProfilesContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateProfilesContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListProfilesContext provides the profiles list action context.
type ListProfilesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListProfilesContext parses the incoming request URL and body, performs validations and creates the
// context used by the profiles controller list action.
func NewListProfilesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListProfilesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListProfilesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListProfilesContext) OK(r *Profile) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.profile+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListProfilesContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListProfilesContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ListProfilesContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListProfilesContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowProfilesContext provides the profiles show action context.
type ShowProfilesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID string
}

// NewShowProfilesContext parses the incoming request URL and body, performs validations and creates the
// context used by the profiles controller show action.
func NewShowProfilesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowProfilesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowProfilesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowProfilesContext) OK(r *Profile) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.profile+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowProfilesContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowProfilesContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ShowProfilesContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowProfilesContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateProfilesContext provides the profiles update action context.
type UpdateProfilesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  string
	Payload *ProfilePayload
}

// NewUpdateProfilesContext parses the incoming request URL and body, performs validations and creates the
// context used by the profiles controller update action.
func NewUpdateProfilesContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateProfilesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateProfilesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateProfilesContext) OK(r *Profile) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.profile+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateProfilesContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateProfilesContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *UpdateProfilesContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateProfilesContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateQuizzesContext provides the quizzes create action context.
type CreateQuizzesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *QuizPayload
}

// NewCreateQuizzesContext parses the incoming request URL and body, performs validations and creates the
// context used by the quizzes controller create action.
func NewCreateQuizzesContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateQuizzesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateQuizzesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateQuizzesContext) OK(r *Quiz) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.quiz+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateQuizzesContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateQuizzesContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *CreateQuizzesContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateQuizzesContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListQuizzesContext provides the quizzes list action context.
type ListQuizzesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListQuizzesContext parses the incoming request URL and body, performs validations and creates the
// context used by the quizzes controller list action.
func NewListQuizzesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListQuizzesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListQuizzesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListQuizzesContext) OK(r QuizCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.quiz+json; type=collection")
	}
	if r == nil {
		r = QuizCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListQuizzesContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListQuizzesContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ListQuizzesContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListQuizzesContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowQuizzesContext provides the quizzes show action context.
type ShowQuizzesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	QuizID string
}

// NewShowQuizzesContext parses the incoming request URL and body, performs validations and creates the
// context used by the quizzes controller show action.
func NewShowQuizzesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowQuizzesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowQuizzesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramQuizID := req.Params["quizId"]
	if len(paramQuizID) > 0 {
		rawQuizID := paramQuizID[0]
		rctx.QuizID = rawQuizID
		if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, rctx.QuizID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`quizId`, rctx.QuizID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowQuizzesContext) OK(r *Quiz) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.quiz+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowQuizzesContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowQuizzesContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ShowQuizzesContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowQuizzesContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DisplayRedditContext provides the reddit display action context.
type DisplayRedditContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID string
}

// NewDisplayRedditContext parses the incoming request URL and body, performs validations and creates the
// context used by the reddit controller display action.
func NewDisplayRedditContext(ctx context.Context, r *http.Request, service *goa.Service) (*DisplayRedditContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DisplayRedditContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
		if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, rctx.UserID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`userId`, rctx.UserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DisplayRedditContext) OK(r *Verification) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.verification+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DisplayRedditContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DisplayRedditContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *DisplayRedditContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DisplayRedditContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowRedditContext provides the reddit show action context.
type ShowRedditContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID string
}

// NewShowRedditContext parses the incoming request URL and body, performs validations and creates the
// context used by the reddit controller show action.
func NewShowRedditContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowRedditContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowRedditContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
		if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, rctx.UserID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`userId`, rctx.UserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowRedditContext) OK(r *Reddituser) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.reddituser+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowRedditContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowRedditContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ShowRedditContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowRedditContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateRedditContext provides the reddit update action context.
type UpdateRedditContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateUserPayload
}

// NewUpdateRedditContext parses the incoming request URL and body, performs validations and creates the
// context used by the reddit controller update action.
func NewUpdateRedditContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateRedditContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateRedditContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateRedditContext) OK(r *Reddituser) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.reddituser+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateRedditContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateRedditContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *UpdateRedditContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateRedditContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// VerifyRedditContext provides the reddit verify action context.
type VerifyRedditContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  string
	Payload *VerificationPayload
}

// NewVerifyRedditContext parses the incoming request URL and body, performs validations and creates the
// context used by the reddit controller verify action.
func NewVerifyRedditContext(ctx context.Context, r *http.Request, service *goa.Service) (*VerifyRedditContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := VerifyRedditContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
		if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, rctx.UserID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`userId`, rctx.UserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *VerifyRedditContext) OK(r *Verification) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.verification+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *VerifyRedditContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *VerifyRedditContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *VerifyRedditContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *VerifyRedditContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateRedditharvestContext provides the redditharvest update action context.
type UpdateRedditharvestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *UpdateRedditUserPayload
}

// NewUpdateRedditharvestContext parses the incoming request URL and body, performs validations and creates the
// context used by the redditharvest controller update action.
func NewUpdateRedditharvestContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateRedditharvestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateRedditharvestContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateRedditharvestContext) OK(r *Reddituser) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.reddituser+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateRedditharvestContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateRedditharvestContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *UpdateRedditharvestContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateRedditharvestContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateResultsContext provides the results create action context.
type CreateResultsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *QuizResultsPayload
}

// NewCreateResultsContext parses the incoming request URL and body, performs validations and creates the
// context used by the results controller create action.
func NewCreateResultsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateResultsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateResultsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateResultsContext) OK(r *Results) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.results+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateResultsContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateResultsContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *CreateResultsContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateResultsContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListResultsContext provides the results list action context.
type ListResultsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListResultsContext parses the incoming request URL and body, performs validations and creates the
// context used by the results controller list action.
func NewListResultsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListResultsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListResultsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListResultsContext) OK(r ResultsCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.results+json; type=collection")
	}
	if r == nil {
		r = ResultsCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListResultsContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListResultsContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ListResultsContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListResultsContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowResultsContext provides the results show action context.
type ShowResultsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	QuizID string
}

// NewShowResultsContext parses the incoming request URL and body, performs validations and creates the
// context used by the results controller show action.
func NewShowResultsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowResultsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowResultsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramQuizID := req.Params["quizId"]
	if len(paramQuizID) > 0 {
		rawQuizID := paramQuizID[0]
		rctx.QuizID = rawQuizID
		if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, rctx.QuizID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`quizId`, rctx.QuizID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowResultsContext) OK(r *Results) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.results+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowResultsContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowResultsContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ShowResultsContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowResultsContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DisplayStackoverflowContext provides the stackoverflow display action context.
type DisplayStackoverflowContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID string
}

// NewDisplayStackoverflowContext parses the incoming request URL and body, performs validations and creates the
// context used by the stackoverflow controller display action.
func NewDisplayStackoverflowContext(ctx context.Context, r *http.Request, service *goa.Service) (*DisplayStackoverflowContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DisplayStackoverflowContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
		if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, rctx.UserID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`userId`, rctx.UserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DisplayStackoverflowContext) OK(r *Verification) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.verification+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DisplayStackoverflowContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DisplayStackoverflowContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *DisplayStackoverflowContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DisplayStackoverflowContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowStackoverflowContext provides the stackoverflow show action context.
type ShowStackoverflowContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID string
}

// NewShowStackoverflowContext parses the incoming request URL and body, performs validations and creates the
// context used by the stackoverflow controller show action.
func NewShowStackoverflowContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowStackoverflowContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowStackoverflowContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
		if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, rctx.UserID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`userId`, rctx.UserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowStackoverflowContext) OK(r *Stackoverflowuser) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.stackoverflowuser+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowStackoverflowContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowStackoverflowContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ShowStackoverflowContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowStackoverflowContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateStackoverflowContext provides the stackoverflow update action context.
type UpdateStackoverflowContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateStackOverflowUserPayload
}

// NewUpdateStackoverflowContext parses the incoming request URL and body, performs validations and creates the
// context used by the stackoverflow controller update action.
func NewUpdateStackoverflowContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateStackoverflowContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateStackoverflowContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateStackoverflowContext) OK(r *Stackoverflowuser) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.stackoverflowuser+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateStackoverflowContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateStackoverflowContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *UpdateStackoverflowContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateStackoverflowContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// VerifyStackoverflowContext provides the stackoverflow verify action context.
type VerifyStackoverflowContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  string
	Payload *VerificationPayload
}

// NewVerifyStackoverflowContext parses the incoming request URL and body, performs validations and creates the
// context used by the stackoverflow controller verify action.
func NewVerifyStackoverflowContext(ctx context.Context, r *http.Request, service *goa.Service) (*VerifyStackoverflowContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := VerifyStackoverflowContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
		if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, rctx.UserID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`userId`, rctx.UserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *VerifyStackoverflowContext) OK(r *Verification) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.verification+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *VerifyStackoverflowContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *VerifyStackoverflowContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *VerifyStackoverflowContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *VerifyStackoverflowContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateStackoverflowharvestContext provides the stackoverflowharvest update action context.
type UpdateStackoverflowharvestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *UpdateStackOverflowUserPayload
}

// NewUpdateStackoverflowharvestContext parses the incoming request URL and body, performs validations and creates the
// context used by the stackoverflowharvest controller update action.
func NewUpdateStackoverflowharvestContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateStackoverflowharvestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateStackoverflowharvestContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateStackoverflowharvestContext) OK(r *Stackoverflowuser) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.stackoverflowuser+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateStackoverflowharvestContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateStackoverflowharvestContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *UpdateStackoverflowharvestContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateStackoverflowharvestContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateTasksContext provides the tasks create action context.
type CreateTasksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateTaskPayload
}

// NewCreateTasksContext parses the incoming request URL and body, performs validations and creates the
// context used by the tasks controller create action.
func NewCreateTasksContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateTasksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateTasksContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateTasksContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateTasksContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateTasksContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *CreateTasksContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateTasksContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListTasksContext provides the tasks list action context.
type ListTasksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID *string
}

// NewListTasksContext parses the incoming request URL and body, performs validations and creates the
// context used by the tasks controller list action.
func NewListTasksContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListTasksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListTasksContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = &rawUserID
		if rctx.UserID != nil {
			if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, *rctx.UserID); !ok {
				err = goa.MergeErrors(err, goa.InvalidPatternError(`userId`, *rctx.UserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListTasksContext) OK(r *Tasks) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.tasks+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListTasksContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListTasksContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ListTasksContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListTasksContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowTasksContext provides the tasks show action context.
type ShowTasksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TaskID string
}

// NewShowTasksContext parses the incoming request URL and body, performs validations and creates the
// context used by the tasks controller show action.
func NewShowTasksContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowTasksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowTasksContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTaskID := req.Params["taskId"]
	if len(paramTaskID) > 0 {
		rawTaskID := paramTaskID[0]
		rctx.TaskID = rawTaskID
		if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, rctx.TaskID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`taskId`, rctx.TaskID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowTasksContext) OK(r *Task) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.task+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowTasksContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowTasksContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ShowTasksContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowTasksContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateTasksContext provides the tasks update action context.
type UpdateTasksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TaskID  string
	Payload *TaskPayload
}

// NewUpdateTasksContext parses the incoming request URL and body, performs validations and creates the
// context used by the tasks controller update action.
func NewUpdateTasksContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateTasksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateTasksContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTaskID := req.Params["taskId"]
	if len(paramTaskID) > 0 {
		rawTaskID := paramTaskID[0]
		rctx.TaskID = rawTaskID
		if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, rctx.TaskID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`taskId`, rctx.TaskID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateTasksContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateTasksContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateTasksContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *UpdateTasksContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateTasksContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ClaimTransactionsContext provides the transactions claim action context.
type ClaimTransactionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TaskID  *string
	Payload *ClaimPayload
}

// NewClaimTransactionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the transactions controller claim action.
func NewClaimTransactionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ClaimTransactionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ClaimTransactionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTaskID := req.Params["taskId"]
	if len(paramTaskID) > 0 {
		rawTaskID := paramTaskID[0]
		rctx.TaskID = &rawTaskID
		if rctx.TaskID != nil {
			if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, *rctx.TaskID); !ok {
				err = goa.MergeErrors(err, goa.InvalidPatternError(`taskId`, *rctx.TaskID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ClaimTransactionsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ClaimTransactionsContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ClaimTransactionsContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ClaimTransactionsContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ClaimTransactionsContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListTransactionsContext provides the transactions list action context.
type ListTransactionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID string
}

// NewListTransactionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the transactions controller list action.
func NewListTransactionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListTransactionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListTransactionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
		if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, rctx.UserID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`userId`, rctx.UserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListTransactionsContext) OK(r *Transactions) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.transactions+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListTransactionsContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListTransactionsContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ListTransactionsContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListTransactionsContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateUsersContext provides the users create action context.
type CreateUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *UserPayload
}

// NewCreateUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller create action.
func NewCreateUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateUsersContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateUsersContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateUsersContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *CreateUsersContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateUsersContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListUsersContext provides the users list action context.
type ListUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CognitoAuthUserID *string
}

// NewListUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller list action.
func NewListUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCognitoAuthUserID := req.Params["cognitoAuthUserId"]
	if len(paramCognitoAuthUserID) > 0 {
		rawCognitoAuthUserID := paramCognitoAuthUserID[0]
		rctx.CognitoAuthUserID = &rawCognitoAuthUserID
		if rctx.CognitoAuthUserID != nil {
			if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, *rctx.CognitoAuthUserID); !ok {
				err = goa.MergeErrors(err, goa.InvalidPatternError(`cognitoAuthUserId`, *rctx.CognitoAuthUserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListUsersContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListUsersContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListUsersContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ListUsersContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListUsersContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowUsersContext provides the users show action context.
type ShowUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID string
}

// NewShowUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller show action.
func NewShowUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
		if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, rctx.UserID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`userId`, rctx.UserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowUsersContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowUsersContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowUsersContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ShowUsersContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowUsersContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowWalletsContext provides the wallets show action context.
type ShowWalletsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID *string
}

// NewShowWalletsContext parses the incoming request URL and body, performs validations and creates the
// context used by the wallets controller show action.
func NewShowWalletsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowWalletsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowWalletsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = &rawUserID
		if rctx.UserID != nil {
			if ok := goa.ValidatePattern(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`, *rctx.UserID); !ok {
				err = goa.MergeErrors(err, goa.InvalidPatternError(`userId`, *rctx.UserID, `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$`))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowWalletsContext) OK(r *Wallets) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.wallets+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowWalletsContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowWalletsContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *ShowWalletsContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowWalletsContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateWalletsContext provides the wallets update action context.
type UpdateWalletsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *WalletPayload
}

// NewUpdateWalletsContext parses the incoming request URL and body, performs validations and creates the
// context used by the wallets controller update action.
func NewUpdateWalletsContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateWalletsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateWalletsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateWalletsContext) OK(r *Wallet) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.wallet+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateWalletsContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateWalletsContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *UpdateWalletsContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateWalletsContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// VerifyWalletsContext provides the wallets verify action context.
type VerifyWalletsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *WalletVerificationPayload
}

// NewVerifyWalletsContext parses the incoming request URL and body, performs validations and creates the
// context used by the wallets controller verify action.
func NewVerifyWalletsContext(ctx context.Context, r *http.Request, service *goa.Service) (*VerifyWalletsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := VerifyWalletsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *VerifyWalletsContext) OK(r *Wallet) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.wallet+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *VerifyWalletsContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *VerifyWalletsContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *VerifyWalletsContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *VerifyWalletsContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// TypeformWebhooksContext provides the webhooks typeform action context.
type TypeformWebhooksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *TypeformPayload
}

// NewTypeformWebhooksContext parses the incoming request URL and body, performs validations and creates the
// context used by the webhooks controller typeform action.
func NewTypeformWebhooksContext(ctx context.Context, r *http.Request, service *goa.Service) (*TypeformWebhooksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := TypeformWebhooksContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *TypeformWebhooksContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *TypeformWebhooksContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *TypeformWebhooksContext) NotFound(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Gone sends a HTTP response with status code 410.
func (ctx *TypeformWebhooksContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *TypeformWebhooksContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}
